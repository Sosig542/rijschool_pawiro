// Datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator
generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id                 Int      @id @default(1)
  defaultPriceCents  Int      @default(250000) // e.g., â‚¬2500.00
  updatedAt          DateTime @updatedAt
}

model Student {
  id                 String           @id @default(cuid())
  registrationId     Int              @unique @default(autoincrement())
  idCardNumber       String?          @unique
  name               String
  contact            String
  address            String
  licenseCategory    String
  agreedPriceCents   Int              // snapshot of price at registration
  registeredAt       DateTime         @default(now())
  theoryStatus       ExamResult       @default(NIET_GEHAALD)
  practicalStatus    ExamResult       @default(NIET_GEHAALD)
  theoryExamAt       DateTime?
  practicalExamAt    DateTime?
  documents          Document[]
  payments           Payment[]
}

model Document {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  type        String
  filename    String   // stored file name under public/uploads
  uploadedAt  DateTime @default(now())
}

model Payment {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  amountCents Int
  method      String   // cash, transfer, etc
  paidAt      DateTime @default(now())
}

enum ExamResult {
  GESLAAGD
  NIET_GEHAALD
}

model Newsletter {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
}


