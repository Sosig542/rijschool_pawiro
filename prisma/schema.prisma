// Datasource
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator
generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id                 Int      @id @default(1)
  defaultPriceCents  Int      @default(250000) // e.g., â‚¬2500.00
  updatedAt          DateTime @updatedAt
}

model Student {
  id                 String           @id @default(cuid())
  registrationId     Int              @unique @default(autoincrement())
  idCardNumber       String?          @unique
  name               String
  contact            String
  address            String
  licenseCategory    String
  agreedPriceCents   Int              // snapshot of price at registration
  registeredAt       DateTime         @default(now())
  theoryStatus       ExamResult       @default(NIET_GEHAALD)
  practicalStatus    ExamResult       @default(NIET_GEHAALD)
  theoryExamAt       DateTime?
  practicalExamAt    DateTime?
  documents          Document[]
  payments           Payment[]
  lessonBookings     LessonBooking[]
}

model Document {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  type        String
  isSubmitted Boolean  @default(false) // checkbox status instead of filename
  submittedAt DateTime? // when the document was marked as submitted
}

model Payment {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  amountCents Int
  method      String   // cash, transfer, etc
  paidAt      DateTime @default(now())
}

enum ExamResult {
  GESLAAGD
  NIET_GEHAALD
}

model Newsletter {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
}

model Instructor {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  isActive  Boolean  @default(true)
  schedules LessonSchedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LessonSchedule {
  id           String      @id @default(cuid())
  instructorId String
  instructor   Instructor  @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  dayOfWeek    DayOfWeek
  isAvailable  Boolean     @default(false)
  maxStudents  Int         @default(5)
  startTime    String      // e.g., "09:00"
  endTime      String      // e.g., "17:00"
  bookings     LessonBooking[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([instructorId, dayOfWeek])
}

model LessonBooking {
  id           String      @id @default(cuid())
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  scheduleId   String
  schedule     LessonSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  lessonDate   DateTime    // Specific date for the lesson
  status       LessonStatus @default(SCHEDULED)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([studentId, lessonDate]) // One lesson per student per day
}

enum UserRole {
  ADMIN
  INSTRUCTOR
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum LessonStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}


